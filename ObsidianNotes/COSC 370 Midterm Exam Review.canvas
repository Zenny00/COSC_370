{
	"nodes":[
		{"type":"text","text":"# Packet Delay\n\n$n_{nodal} = d_{proc} + d_{queue} + d_{trans} + d_{prop}$ \n","id":"f79fcefc833dd64e","x":69,"y":-465,"width":440,"height":130,"color":"1"},
		{"type":"text","text":"# Transmission Delay\n\nL: packet length (bits)\nR: Link transmission rate (bps)\n$d_{trans} = L/R$  ","id":"ebb406cfbc1abeb1","x":-120,"y":-237,"width":378,"height":190,"color":"1"},
		{"type":"text","text":"# Queueing Delay\n\nTime waiting at output link for transmission\nDepends on the congestion level of the router","id":"f9a0e8b1afe7c1d0","x":320,"y":-229,"width":378,"height":182,"color":"1"},
		{"type":"text","text":"# Nodal Processing\n\nCheck bit errors\nDetermine output link\nTypically takes less than msec of time","id":"7212f96998b321b5","x":-120,"y":-738,"width":378,"height":190,"color":"1"},
		{"type":"text","text":"# Propagation Delay\n\nd: Length of phtsical link\ns: propagation speed ($~2x10^8 m/sec$)\n$d_{prop} = d/s$  ","id":"f05e1d144fccc11f","x":361,"y":-738,"width":378,"height":190,"color":"1"},
		{"type":"text","text":"# Throughput\n\nThe rate, measured in bits per unit of time at which the bits are being sent from the sender to the receiver. May be measured instantaneously or or as an average for a period of time.\n\nThe throughput of a link will always be the value of the lowest possible throughput. The bottleneck link.","id":"94e359078e239a09","x":-1200,"y":-738,"width":380,"height":320,"color":"2"},
		{"type":"text","text":"# Utilization\n\nMeasured as by dividing the throughput bottleneck by the transmission rate of the current link.\n\nUtilization = (Bottleneck Throughput)/(Link Transmission Rate)","id":"121d8fd58ac083b3","x":-720,"y":-738,"width":498,"height":206,"color":"2"},
		{"type":"text","text":"# Caravan Queueing Analog\n\n![[Pasted image 20230307205012.png]]\n\n- Assume cars \"propagate\" at $100 km/hr$. \n- The tool both takes $12 sec$ to process each car (bit transmission time). \n\nThink of the cars as bits, the entire caravan is equivalent to a packet.\n\n#### Q: How long until the caravan is lined up before the second booth?\n\nWe have the 10 car caravan (our packet), each car takes $12 sec$ to process. Thus, the total processing time is $12sec/car * 10cars = 120 sec$. \n\nThe $100km$ between the two booths will take $1 hour = 60 minutes$.\nThe total amount of time from start to the cars being lined up in front of the second booth will be $60 minutes + (120 sec/60 sec) = 62 minutes$. \n","id":"fd321e0d69dc5082","x":-102,"y":66,"width":800,"height":580,"color":"1"},
		{"type":"text","text":"# Packet Queueing Delay\n\nR = Link bandwitdth (bits per second)\nL = Packet length (bits)\na = Average packet arrival rate\n\nIf $(L * a)/R$ ~ 0 small queueing delay\nIf $(L * a)/R-> 1$ large queueing delay\nIf $(L * a)/R > 1$ More work is arriving than can be serviced, average delay is inifinite.\n\n![[Pasted image 20230307210240.png]]","id":"7e44c0243b21bedd","x":800,"y":-432,"width":682,"height":589,"color":"1"},
		{"type":"text","text":"# Client-Server Paradigm\n\n### Server:\n\n- The host is always on\n- A perminent, well-known IP address\n- Often in data center, easy scaling\n\n### Client: \n\n- Contacts the server\n- May be intermittenly connected\n- May have a dynamic IP address\n- Does not communicate directly with each other\n\n###### Examples: HTTP, IMAP, FTP","id":"eb89118d11d5274c","x":-1364,"y":-362,"width":440,"height":440,"color":"3"},
		{"type":"text","text":"# Peer-peer architecture\n\n- No always-on server\n- Arbitrary end systems directly communicate with each other.\n- Peers request services from other peers, they also provide services in return to other peers.\n\t- Self scalibility: new peers bring new service capacity, as well as new demands\n- Peers are intermittenly connected and change IP addresses.\n\t- Complex management\n- Example: Linux P2P file sharing (SCP)\n","id":"63a2a163516acddf","x":-911,"y":-362,"width":440,"height":440,"color":"3"},
		{"type":"text","text":"# IP Addresses\n\n- IPv4 vs. IPv6\n- Devices are identified using a unique 32-bit address.\n- Using IPv4 there are $2^{32}$ possible IP addresses.\n","id":"5c7081e77b877c26","x":-1006,"y":1040,"width":408,"height":220,"color":"6"},
		{"type":"text","text":"# The Internet\n\n- A collection of billions of computing devices and packet switches interconnected by links\n- A network of networks\n- A collection of hardware and software components executing protocools that define the format and the order of messages exchanged between two or more communicating entities, as well as the action taken on the transmission and.or receipt of a message or other event.","id":"d9e0d8cfd5b2988d","x":800,"y":196,"width":424,"height":364,"color":"4"},
		{"type":"text","text":"# TCP: Roundtrip\n\n- Developed by Vint Cerf and Bob Kahn in the 1980s\n- Reliable, byte stream oriented protocol\n- Bytes a delivered in-order\n- Connection between client and server must first be setup\n- Connection-oriented: Setup is required between client and server processes.\n\nTCP provides:\n- Reliable transport\n- Flow control\n- Congestion control\n\nTCP does not provide:\n- Timing\n- Minimum throughput guarentee\n- Security\n\n#### TCP Python Example Server\n\n![[Pasted image 20230313002822.png]]","id":"f027933589f022bc","x":1520,"y":20,"width":560,"height":920,"color":"#264d00"},
		{"type":"text","text":"# Congestion Control\n\n- Regulates the flow of data when there is congestion on the network. Congestion occurs when the amount of data being transmitted exceeds the network's capacity to handle it. **Congestion control is used to prevent and or reduce congestion on a network.**","id":"4f0ccd957583a326","x":2180,"y":520,"width":440,"height":260,"color":"#264600"},
		{"type":"text","text":"# Flow Control\n\n- The regulation of the flow of data between two endpoints to **ensure that the reciever can handle the data at the rate it is being sent.**\n- The provided service will ensure that the sender does not send so fast as to overflow the receiver buffers.\n\n- Typically implemented at the transport layer","id":"3c42c293b0d4dc40","x":2180,"y":180,"width":440,"height":300,"color":"#264600"},
		{"type":"text","text":"# DNS: Domain Name System\n\nInternet hosts and routers have only one identifier, a (32-bit) IP address used to address datagrams\nHumans use a \"name\" to address these same datagrams, for example, cs.umass.edu\n\n##### How do we map between an IP and name?\nSolution: Domain Name System\n- Distributed database implemented in hierarchy of many name servers.\n- Application-layer protocol: Hosts and name servers communicate to resolve names (translation between addresses and names)\n\t- Note: This is a core Internet function, implemented as an application layer protocol\n\t- Complexity at a network's edge\n\n#### DNS Services\n- Hostname to IP addresss resolution\n- Host aliasing\n\t- Canonical addressing\n\t- Alias names\n- Mail server aliasing\n- Load distribution\n\t- Replicated web servers: Many IP addresses correspond to one name\n\nDNS is not centralized because:\n- It presents a single point of failure\n- Traffic volume\n- Distant centralized database\n- Maintenance\n- Doesn't scale\n\n#### DNS Hierarchy:\n![[Pasted image 20230313004334.png]]","id":"df37a2a3f6062c24","x":-239,"y":1500,"width":939,"height":1100,"color":"2"},
		{"type":"text","text":"# Iterative Query\n\n- Contacted server replies with the name of the server to contact, \"I dont know the name, ask this server instead\"\n\n![[Pasted image 20230313111855.png]]","id":"2cc8022386d8828a","x":240,"y":2760,"width":591,"height":572,"color":"2"},
		{"type":"text","text":"# Recursive Query\n\n- Puts the burden of name resolution on the contacted name server\n- Places heavy load at upper levels of the DNS heirarchy\n\n![[Pasted image 20230313112004.png]]","id":"46b0fd1b50cd2c7d","x":-420,"y":2760,"width":591,"height":572,"color":"2"},
		{"type":"text","text":"# Caching and Updating DNS Records\n\n- Once any name server learns a mapping (between name and IP), it caches mapping\n\t- Cache entires will expire (timeout) after some given Time to Live (TTL)\n\t- TLD servers are typically cached in local name servers, this means root servers are not visited very often\n- Cached entries may be out of date\n\t- Using cache provides a best-effort name to address translation\n\t- If a host name changes its IP address the new address may not be known Internet-wide until all caches reach their TTL\n- Solutions to this caching problem have been proposed via update/notify mechanisms through IETF standard RFC 2136","id":"c272616c6e9fde0e","x":-1006,"y":1290,"width":600,"height":420,"color":"2"},
		{"type":"text","text":"# Type A\n\n- Name is hostname\n- Value is IP address","id":"3d71d557746de9f4","x":-1718,"y":2160,"width":320,"height":240,"color":"2"},
		{"type":"text","text":"# Type NS\n\n- Name is a domain (ex. foo.com)\n- Value is the name of the authoritative name server for the given domain","id":"404f18dd24537c94","x":-1358,"y":2160,"width":320,"height":240,"color":"2"},
		{"type":"text","text":"# Type CNAME\n\n- Name is the alias name for some \"canonical\" (real) name\n- www.ibm.com is really servereast.backup2.ibm.com\n- Value is the canonical name","id":"0268051225f86326","x":-936,"y":2160,"width":323,"height":240,"color":"2"},
		{"type":"text","text":"# Type MX\n\n- Value is the name of a mailserver associated with name","id":"e05b1de695f4d689","x":-578,"y":2160,"width":317,"height":240,"color":"2"},
		{"type":"text","text":"# DNS Record Types\n\n- DNS: a distributed database storing resource records (RR)\n\t- RR format: (name, value, type, ttl)\n\t- Tuple like format\n","id":"507111cdd66f8799","x":-1198,"y":1761,"width":446,"height":210,"color":"2"},
		{"type":"text","text":"# Email\n\n- Three major components:\n\t- User agents\n\t- Mail servers\n\t- Simple mail transfer protocol: SMTP\n\n![[Pasted image 20230313120406.png]]\n\nIMAP: Internet Mail Access Protocol is used to retrieve messages from a mail server","id":"fc12d4b55d29d076","x":2220,"y":1080,"width":702,"height":720,"color":"5"},
		{"type":"text","text":"# User Agent\n\n- Also known as the \"mail reader\"\n- Used to compose, edit, or read mail messages\n- Examples include Outlook, or iPhone mail client\n- Outgoing and incoming messages are stored on a mail server","id":"361f6b133ac2e8d9","x":3040,"y":1073,"width":480,"height":240,"color":"5"},
		{"type":"text","text":"# Email: the RFC\n\n- Uses TPC to reliably transfer email message from client (mail server) to server, done over port 25\n- Uses a direct transfer the sending server (acts like a client) to recieving server\n- Transfer has three phases:\n\t- Handshaking\n\t- Transfer of messages\n\t- Closure\n- Command and reponse interation similar to HTTP\n\t- Commands: ASCII text\n\t- Reponse: Status code and phrase\n- Messages must be encoded using 7-bit ASCII","id":"a5505702c14f9f35","x":3040,"y":620,"width":620,"height":420,"color":"5"},
		{"type":"text","text":"# Example Email Scenario\n\n- Alice uses a User Agent to compose an email to bob@someschool.edu\n- Alice's User Agent sends message to her mail server, message is then placed into the message queue\n- Client side of STMP opens TCP connection with Bob's mail server\n- STMP client sends Alice's message over the TCP connection\n- Bob's mail server places the message in Bob's mailbox\n- Bob invokes his User Agent to read the message\n\n![[Pasted image 20230313121859.png]]","id":"360a06d09ba0f24b","x":2201,"y":1900,"width":740,"height":480,"color":"5"},
		{"type":"text","text":"# SMTP vs. HTTP\n\n- HTTP is a pull oriented protocol\n- STMP is push based\n\n\n- Both have ASCII command and response interations with status codes\n- HTTP: Each object is encapsulated in its own message\n- STMP: Multiple objects may be sent as a part of a multipart message\n\n\n- STMP uses persistent connections\n- STMP requires message (both header and body) to be in 7-bit ASCII\n- SMTP server uses CRLF.CRLF to determine the end of a message","id":"e08e6f5c1392b15b","x":2987,"y":1900,"width":587,"height":320,"color":"5"},
		{"type":"text","text":"# Example Socket\n\n![[Pasted image 20230308102936.png]]\n\nThe socket would be 128.119.245.12:80\n\nCommon port numbers are:\n- HTTP: 80\n- SMTP: 25\n- HTTPS: 443\n- POP3: 110\n- IMAP: 143\n- DNS: 53","id":"adb557c81264d903","x":-1022,"y":560,"width":440,"height":460,"color":"6"},
		{"type":"text","text":"# Mail Servers\n\n- Mailbox: Contains incoming messages for user\n- Message Queue: Contains outgoing (to be sent) mail messages","id":"d99cd124fcf9ce7f","x":3040,"y":1354,"width":480,"height":173,"color":"5"},
		{"type":"text","text":"# STMP Protocol:\n- Used for communication between mail servers to send email messages\n- Client: A sending mail server\n- Server: The receiving mail server","id":"9487e0c339e0149d","x":3040,"y":1577,"width":480,"height":207,"color":"5"},
		{"type":"text","text":"# HTTP Response Message\n\n![[Pasted image 20230313132128.png]]","id":"596fb971950c1308","x":2901,"y":-1278,"width":729,"height":380,"color":"#d7ff0f"},
		{"type":"text","text":"# HTTP Request Message\n\n- Two types of HTTP messages: request or response\n- HTTP request message:\n\t- ASCII (human-readable format)\n\n![[Pasted image 20230313130330.png]]","id":"1f297d634dc2f53c","x":2901,"y":-838,"width":729,"height":447,"color":"#d7ff0f"},
		{"type":"text","text":"# HTTP Reponse Time\n\n- One RTT to initiate TCP connection\n- one RTT for HTTP request and first few bytes of HTTP reponse to return\n- Object/file transmission time\n![[Pasted image 20230313124944.png]]","id":"ca3508d184191659","x":3690,"y":-469,"width":638,"height":535,"color":"#d7ff0f"},
		{"type":"text","text":"# HTTP\n\n- 1.0 is not persistent\n- 1.1 is persistent\n- 2.0 supports priority scheduling\n\n- HTTP is stateless, meaning it does not save information about previous interactions with the client.","id":"44e03a638c7d35ee","x":2927,"y":-326,"width":677,"height":248,"color":"#d7ff0f"},
		{"type":"text","text":"# Persistent HTTP\n\n1) TCP connection opened to a server\n2) Multiple objects can be sent over the single TCP connection between the client and server\n3) TCP connection is closed\n\nResponse time: RTT + file transmission time","id":"b58bec406dbe1509","x":2830,"y":124,"width":420,"height":260,"color":"#d7ff0f"},
		{"type":"text","text":"# Non-persistent HTTP\n\n1) TCP connection is opened\n2) At most one object is sent over the conneciton\n3) TCP connection is closed\n\nResponse time is 2 RTT + file transmission time\nOS overhead is required for each TCP connection","id":"06452951d8899820","x":3300,"y":124,"width":420,"height":260,"color":"#d7ff0f"},
		{"type":"text","text":"# Status Codes\n\n- Status codes appear in the first line in a server-to-client response message.\n\n- 200 OK\n\t- Request successful, requested object is available later in the message.\n- 301 Moved Permanently\n\t- Requested object has been moved, new location will be specified later in this message\n- 400 Bad Request\n\t- Request msg not understood by the server\n- 404 Not Found\n\t- Requested document was not found on this server\n- 505 HTTP Version Not Supported","id":"8947693768a4a63f","x":2255,"y":-432,"width":541,"height":461,"color":"#d7ff0f"},
		{"type":"text","text":"# Cookies\n\n- Cookies are used to maintain a user/server state\n\n##### The four components of a cookie are:\n1) Cookie header line of HTTP response message\n2) Cookie header line in next HTTP message\n3) Cookie file kept on user's host, managed by user's browser\n4) Backend database at website\n\n![[Pasted image 20230313134057.png]]\n\n- Cookies can be used for authorization, shopping carts, recommendations, or user session states (web based email)\n- However, cookies also present privacy concerns as third party cookies can be tracked across multiple websites.","id":"76c7f2e3931cc0c3","x":3760,"y":124,"width":862,"height":734,"color":"1"},
		{"type":"text","text":"# Application Layer Protocol\n\n- An application layer protocol defines:\n\t- Types of messages exchanged\n\t- Message syntax\n\t- Message semantics\n\t- Rules for when and how processes send and response to messages\n\t- Open protocols allow for interoperability, some examples are HTTP and SMTP\n\n- Applications need a transport service that provides\n\t- Data integrity: some apps require 100% reliable data transfer\n\t- Timing: Some apps require low delay\n\t- Throughput: Some apps require minimum amount of throughput\n\t- Security: Some apps require encryption","id":"50478439a50c8966","x":-102,"y":696,"width":743,"height":408,"color":"4"},
		{"type":"text","text":"# Example without Cache\n\n#### Scenario:\n- Access link has a rate of: 1.54 Mbps\n- RTT from institution router to server: 2 sec\n- Web object size: 100K bits\n- Average request rate from browsers to origin servers: 15 per sec\n\nAverage data rate to browsers: 15/sec * 100K bits = 1,500,000 bits/sec = 1.50 Mbps\n\n![[Pasted image 20230313144532.png]]\n\nLAN utilization: 1.50 Mbps / 1 Gbps = 1.50 / 1000 = 0.0015\nAccess link utilization: 1.50 Mbps / 1.54 Mbps = 0.97\n\nEnd-to-end delay: Internet delay + access link delay + LAN delay = 2 sec + (likely minutes as utilization is almost 100%) + (mircoseconds as utilization is very low)","id":"806d738a7c126338","x":4003,"y":1467,"width":585,"height":760,"color":"6"},
		{"type":"text","text":"# Web Caches\n\n**Goal**: Satisfy client request without contacting origin server\n\nBrowser will send all HTTP requests to cache:\n- if object exists in cache, cache will return object to client\n- otherwise, cache requests object from origin server, cache recieves object, then returns the object to the client\n\nA web cache acts as both a client and a server:\n- Server for original requesting client\n- Client to the origin server\n\nA cache is typically installed by an ISP, university, or company.\n\n","id":"6f255bfd8668a339","x":4252,"y":893,"width":741,"height":420,"color":"6"},
		{"type":"text","text":"# Why do we cache?\n\n- Reduce reponse time for client request\n\t- A cache is typically closer to the client\n- Reduces webtraffic on an institution's access link\n- Enables \"poor\" content providers to more effectively deliver content","id":"6dcd8f42c9cc35c5","x":3760,"y":893,"width":431,"height":232,"color":"6"},
		{"type":"text","text":"# Sender\n\n- Passed an application layer message\n- Determines segment header fields values\n- Creates segment\n- Passes segment to network layer","id":"e833de7bfb92184c","x":4468,"y":2727,"width":355,"height":248,"color":"1"},
		{"type":"text","text":"# Reciever\n\n- Recieves segment from network layer\n- Checks header values\n- Extracts application layer message\n- Demultiplexes message up to application via socket","id":"b56ad5c460caad65","x":4848,"y":2727,"width":360,"height":248,"color":"1"},
		{"type":"text","text":"# Multiplexing at Sender \n\n- Handle data from multiple sockets\n- Add transport header","id":"36ac4716bcdedc64","x":4330,"y":3061,"width":477,"height":151,"color":"1"},
		{"type":"text","text":"# Demultiplexing at Receiver\n\n- Use header info to deliver received segments to correct socket","id":"68d0c580d7bd38cc","x":4877,"y":3061,"width":477,"height":151,"color":"1"},
		{"type":"text","text":"# How Demultiplexing Works\n\n- Host recieves IP datagrams\n\t- Each datagram has source IP address and destination IP address\n\t- Each datagram carries one transport layer segment\n\t- Each segment has source and destination port number\n- Host will use IP addresses & port numbers to direct segment to appropriate socket\n\n![[Pasted image 20230313162930.png]]","id":"b2814a3c0c951f0e","x":5274,"y":2243,"width":679,"height":732,"color":"1"},
		{"type":"text","text":"# Transport Layer\n\n- Provide logical communication betweeen application processes running on different hosts\n- Transport protocols actions on the end systems:\n\t- Sender will break application messages into segments, passes to network layer\n\t- Receiver will reassemble segments into messages, passes to application layer\n","id":"ceb076201912513e","x":4468,"y":2413,"width":740,"height":214,"color":"1"},
		{"type":"text","text":"# Transport vs. Network Layer\n\n- Network layer: Logical communication between hosts\n\n- Transport layer: Logical communication between processes\n\t- Relies on and enhances network layer services\n\nPeople in a house analogy:\n- 12 kids in Ann's house sending letters to 12 kids in Bill's house\nHosts are the houses\nProcesses are the kids","id":"056cc6903dbf9460","x":3914,"y":2413,"width":494,"height":374,"color":"1"},
		{"type":"text","text":"# Connectionless Demultiplexing\n\n- When creating a datagram to send into UDP socket, one must specify both the destination IP and port number\n- When receiving host receives UDP segment:\n\t- Checks destination port number in segment\n\t- Directs UDP segment to socket with that port number\n\nUDP: Demultiplexing using ONLY the destination port number\nDatagrams with the same destination port number, but different source IP and/or source port numbers will be directed to same socket at the receiving host.\n\n![[Pasted image 20230313163713.png]]","id":"e64e2d2474b58113","x":6074,"y":1740,"width":1280,"height":860,"color":"1"},
		{"type":"text","text":"# Connection-oriented demultiplexing\n\n- TCP socket identified by a 4-tuple: source IP, source port, dest IP, dest port\n- Demux: Receiver uses all four values to direct segment to appropriate socket\n- Server may support many simultaneous TCP sockets:\n\t- Each socket is identified by its own tuple\n\t- Each socket is associated with a different connecting client\n\t\nTCP: Demultiplexing using 4-tuple: Source and destination IP and port numbers\n\n![[Pasted image 20230313164116.png]]","id":"10e8ec35e12c341b","x":6074,"y":2620,"width":1280,"height":880,"color":"1"},
		{"type":"text","text":"# Root\n\n- Offical contact of last resort for name servers that cannot resolve name\n- Essential to the Internet's functionaility \n- Managed by ICANN\n- 13 logical servers (each \"server\" is replicated many times)","id":"c9bfb6dcac155385","x":772,"y":1443,"width":520,"height":240,"color":"2"},
		{"type":"text","text":"# Top Level Domain\n\n- Responsible for .com, .org, .net, .edu, .cn, .fr, .uk, etc...\n- Authoritative registry for .com, .net TLD\n- Educause: .edu TLD","id":"ac586d4c2703c531","x":772,"y":1733,"width":520,"height":271,"color":"2"},
		{"type":"text","text":"# Authoritative\n\n - An organization's own DNS server(s), providing hostname to IP mappings for an organization's named hosts\n- May be managed by an organization or service provider","id":"3fdab82b84fad7ac","x":772,"y":2093,"width":520,"height":271,"color":"2"},
		{"type":"text","text":"# Local DNS Server\n\n- Is not strictly part of the hierarchy\n- Each ISP (residential ISP, company, university) has one\n\t- May be refered to as \"default name server\"\n- When a host makes a DNS query, query is first sent to its local DNS server\n\t- Has local cache of recent name-to-address translation pairs (however, this may be outdated)\n\t- Acts as a proxy, forwards query into hierarchy","id":"95c290e2c36ff453","x":772,"y":2413,"width":520,"height":319,"color":"2"},
		{"type":"text","text":"# UDP: One way\n\n- A best effort service: The service will make a best effort to deliver data to the destination but makes no guarantees that any particular segment of data will actually arrive.\n- No handshaing before sending data\n- Sender explicitly attaches IP destination address and port number to each packet\n- Receiver extracts sender IP address and port number from each recieved packet\n\nTransmitted data may be lost or received out-of-order\n\n#### Application Viewpoint:\n\nUDP provides *unreliable* transfer of groups of bytes (also known as \"datagrams\") between client and server.\n\n#### UDP Python Example Server\n\n![[Pasted image 20230313001206.png]]\n\nUDP is connectionless:\n- Requires no handshaking between sender and receiver\n- Each UDP segment is handled independently of each other\n\nWhy UDP?\n- No connection establishment (which adds RTT delay)\n- Simple, no connection state at sender or receiver\n- Small header size\n- No congestion control\n\t- Can function regardless of network congestion\n- Reliability can be increased using a checksum\n\nUDP is used in multimedia (streaming), DNS, HTTP/3\n\n# UDP Segment Header\n\n![[Pasted image 20230313164732.png]]","id":"e138291d8f447bb8","x":1340,"y":956,"width":840,"height":1544,"color":"6"},
		{"type":"text","text":"# Checksum\n\nGoal: Detect errors in transmitted segment\n\n##### Sender: \n- Treat contents of UDP segment including the header, as a sequence of 16-bit integers\n- Checksum: Addition (one's complement sum) of segment content\n- Checksum value put into UDP checksum field\n\n##### Receiver\n- Compute checksum of the received segment\n- Check if computed checksum is equal to field value:\n\t- Not equal - error\n\t- Equal - no error found (errors still may exist)\n\n![[Pasted image 20230313165513.png]]","id":"595fbcbed55ef0d0","x":1315,"y":2573,"width":890,"height":821,"color":"3"},
		{"type":"text","text":"# Routing vs. Forwarding\n\nRouting is the local action of moving arriving packets from the router's input link to the appropriate router output link\n\nRouting is a global action of determining the source-destination paths taken by packets","id":"a2f1035ccdf898cc","x":320,"y":-1280,"width":480,"height":211,"color":"4"},
		{"type":"text","text":"# Protocol\n\nDefine the format and order of messages sent and received among network entities, and actions taken on message transmission and receipt.","id":"92d4fcc8f890a650","x":-112,"y":-1280,"width":401,"height":188,"color":"6"},
		{"type":"text","text":"# Packet Loss\n\n- If arrival rate (in bps) to link exceeds transmission rate (bps) of link for a period of time:\n\t- Packets will queue\n\t- or packets can be dropped, if buffer is full\n- The queue (or buffer) has a finite capacity\n- If a packet arrives to a full queue it will be dropped\n- A lost packet may be retransmitted by a previous node, by source end system, or may not be at all.\n\n![[Pasted image 20230307212437.png]]","id":"a4619caaeae5e125","x":1520,"y":-520,"width":680,"height":520,"color":"5"},
		{"type":"text","text":"# Types of HTTP Requests\n\n### POST:\n- Web page often includes form input\n- User input sent from client to tserver in entity body of HTTP POST request message\n\n### GET:\n- Can be used to send data to server\n- Include user data in URL field of HTTP GET request message\n\n### HEAD:\n- Request headers (only) that would be returned *if* some specific URL were requested with an HTTP GET method.\n\n### PUT:\n- Uploads new file to server\n- Completely replaces file that exists at specified URL with content in entity body of POST HTTP request message","id":"4a3f5c2ca8de3471","x":2150,"y":-1150,"width":646,"height":600,"color":"#d7ff0f"},
		{"type":"text","text":"# End-to-end delay:\n\n- 2L/R","id":"188eb83513bcc43a","x":320,"y":-1047,"width":331,"height":120,"color":"3"},
		{"type":"text","text":"# Store and Forward: \n\n- Entire packet must arrive at router before it can be transmitted onto next link\n- Store and forward allows us to know at what point the message is lost or corrupted rather than finding out at the destination","id":"b8b89e5e58ad7dbc","x":-112,"y":-1069,"width":347,"height":290,"color":"5"},
		{"type":"text","text":"# Bandwidth\n\n- Number of bits per second","id":"791243128bba0273","x":320,"y":-894,"width":287,"height":115,"color":"6"},
		{"type":"text","text":"# Traceroute\n\n- Gives network admins tools to find weak points in a network.\n- Gives three sample times.\n- \"*\" means router is on but not configured","id":"836fd61f0cc08e1f","x":-600,"y":-1280,"width":464,"height":203,"color":"3"},
		{"type":"text","text":"# Internet Protocol Stack\n\n- Application: Supporting Network Applications\n\t- IMAP, SMTP, HTTP\n- Transport: Process-process data transfer\n\t- TCP, UDP\n- Network: Routing datagrams from source to destination\n\t- IP, routing protocol\n- Link: Data transfer between neighboring network elements\n\t- Ethernet, 802.11 WiFi, Fiber Optic\n- Physical\n\t- Bits on wire","id":"d168950862be6b76","x":-600,"y":-1680,"width":517,"height":380,"color":"6"},
		{"type":"text","text":"# Physical Media\n- Physical link: Lies between transmitter and receiver\n- Guided media: Signals propagate in solid media, copper, fiber, coax\n- Unguided media: Singals propagate freely, radio","id":"074f079d31d83b4e","x":-600,"y":-1058,"width":394,"height":263,"color":"#0091ff"},
		{"type":"text","text":"# Process Communication\n\n#### Process: \n- Program running within a host\n- Within the same host, two processes communicate using interprocess communication (defined by the operating system)\n- Processes in different hosts communicate by exchaing messages\n","id":"e97c324844ab3ab2","x":-1022,"y":220,"width":475,"height":315,"color":"3"},
		{"type":"text","text":"# Email Message Format\n\n![[Pasted image 20230313122429.png]]","id":"bcfd9563d2173a39","x":2220,"y":2460,"width":873,"height":400,"color":"5"},
		{"type":"text","text":"# Ping\n\n- Command line tool for checking connectivity between two computers.\n- Allows us to check the time duration for sending and reeiving responses from a network.","id":"94998932d3bc54bf","x":-880,"y":-1280,"width":250,"height":353,"color":"4"},
		{"type":"text","text":"# Packets\n\nSmaller chunks of data known as packets.\nPackets are measured in length of L-bits.","id":"25ec58e5046bc24f","x":1122,"y":-722,"width":360,"height":158,"color":"5"},
		{"type":"text","text":"# DNS Protocol Messages\n\n- Query and reply messages have the same format\n\n![[Pasted image 20230313114849.png]]\n\n- Identification: 16-bit number for query, reply uses same number\n- Flags: query or reply flag, recursion desired, recursion available, reply is authoritative\n- Questions: Name, type fields for a query\n- Answers: RRs in response to a query\n- Authority: Records for authoritative servers\n- Additional Info: Additional \"helpful\" info that may be used","id":"793bfdcfcded4f89","x":-1143,"y":2673,"width":680,"height":659,"color":"2"},
		{"type":"text","text":"# Physical Layer Technologies\n\n- Fiber optic cable (10-100 Gbps) (Low error rate)\n- Coaxial cable (100 Mbps per channel)\n- Twisted pair (CAT 5 or CAT 6) (100 Mbps-10 Gbps)\n- 802.11 WiFi channel (100 Mbps)\n- Satellite channel (45 Mbps per channel, 270 msec end-end)\n- 4G/5G cellular (10 Mbps 4G)\n\nFiber optic is the fastest of these","id":"c4cb17e5345459d2","x":772,"y":606,"width":480,"height":334,"color":"4"},
		{"type":"text","text":"# Sockets\n\n- Interface between applicaiton layer and transport layer\n- Process sends/receives messages to/from its socket\n- Sockets are analogous to doors\n\t- Sending process shoves a message out of its door\n\t- Sending process relies on transport infrastructure on other door to deliver message to socket at receiving process\n\t- two sockets involved: one on each side\n- Combination of IP and port\n\n![[Pasted image 20230307214549.png]]","id":"59a221b82dbb8e01","x":-1741,"y":560,"width":597,"height":520,"color":"6"},
		{"type":"text","text":"# Client and server processes\n\n- Client process: Initiates communication\n- Server process: Waits to be contacted by clients","id":"1e3b595e23c7d6e5","x":-1560,"y":220,"width":464,"height":160,"color":"3"},
		{"type":"text","text":"# Number of Hops\n\n- How many routers does a message pass through","id":"1801244f84f7d5ad","x":-65,"y":-1438,"width":307,"height":135,"color":"1"},
		{"type":"text","text":"# Packet Switching\n\n- Resources are used on demand, not reserved in advance\n- Data may be queued before being transmitted due to other user's data that's also queueing for transmission\n- Packet loss and variable end-end delays are possible with this technique\n- This technique is used in the Internet\n- Hosts break application-layer messages into packets:\n\t- Forward packets from one router to the next, across links on path from source to destination\n\t- Each packet is transmitted at full link capacity","id":"f5d7dc5562b5f090","x":821,"y":-1280,"width":481,"height":386,"color":"2"},
		{"type":"text","text":"# Circuit Switching\n\n- Reserves resources needed for a call from source to destination\n- This technique was the basis for the telephone call switching during the 20th century and into the beginning of the current century\n- No sharing circuit segments, if no call is ongoing the segment is idle","id":"2b1f1ed5df26beac","x":1320,"y":-1280,"width":557,"height":260,"color":"2"},
		{"type":"text","text":"# Example with Cache\n\n#### Scenario:\n- Access link has a rate of: 1.54 Mbps\n- RTT from institution router to server: 2 sec\n- Web object size: 100K bits\n- Average request rate from browsers to origin servers: 15 per sec\n\nAverage data rate to browsers: 15/sec * 100K bits = 1,500,000 bits/sec = 1.50 Mbps\n\n![[Pasted image 20230313145243.png]]\n\nLets suppose the cache hit rate is ~40% meaning only 60% of requests are satisfied at the origin.\n\nAccess link: Only 60% of requests use access link\nData rate to browsers over access link = 0.6 * 1.50 Mbps = 0.9 Mbps\nThis means the access link utilization is 0.9 / 1.54 = 0.58, meaning response time will be in the msec.\n\nDelay from origin = 2 sec + (msec) + (usec) = 2.01 sec\n\nAverage end-to-end delay: 0.6 * (delay from origin servers) + 0.4 * (delay from cache) = 0.6 * (2.01) + 0.4 * (msec) = ~ 1.2 sec","id":"287724591723812b","x":4640,"y":1467,"width":585,"height":893,"color":"6"}
	],
	"edges":[
		{"id":"125db91d82af16f6","fromNode":"94e359078e239a09","fromSide":"right","toNode":"121d8fd58ac083b3","toSide":"left"},
		{"id":"90cc6fc81b29dafc","fromNode":"7212f96998b321b5","fromSide":"bottom","toNode":"f79fcefc833dd64e","toSide":"top"},
		{"id":"ae2d932c5614d3f2","fromNode":"f05e1d144fccc11f","fromSide":"bottom","toNode":"f79fcefc833dd64e","toSide":"top"},
		{"id":"e0820e0cda37ce46","fromNode":"ebb406cfbc1abeb1","fromSide":"top","toNode":"f79fcefc833dd64e","toSide":"bottom"},
		{"id":"3e039f38de9a3510","fromNode":"f9a0e8b1afe7c1d0","fromSide":"top","toNode":"f79fcefc833dd64e","toSide":"bottom"},
		{"id":"0ec6c889bab86050","fromNode":"f9a0e8b1afe7c1d0","fromSide":"right","toNode":"7e44c0243b21bedd","toSide":"left"},
		{"id":"9733e827caee6626","fromNode":"f9a0e8b1afe7c1d0","fromSide":"bottom","toNode":"fd321e0d69dc5082","toSide":"top"},
		{"id":"b2a3397c75d2bbb1","fromNode":"25ec58e5046bc24f","fromSide":"bottom","toNode":"7e44c0243b21bedd","toSide":"top","color":"5"},
		{"id":"847d7c7ad48b46aa","fromNode":"25ec58e5046bc24f","fromSide":"left","toNode":"f79fcefc833dd64e","toSide":"right"},
		{"id":"a6ec8683428c0884","fromNode":"25ec58e5046bc24f","fromSide":"bottom","toNode":"a4619caaeae5e125","toSide":"top"},
		{"id":"a803a88cb0d4996d","fromNode":"eb89118d11d5274c","fromSide":"bottom","toNode":"e97c324844ab3ab2","toSide":"top"},
		{"id":"763f083cfa4a78c0","fromNode":"63a2a163516acddf","fromSide":"bottom","toNode":"e97c324844ab3ab2","toSide":"top"},
		{"id":"b1c97a8e5200822d","fromNode":"e97c324844ab3ab2","fromSide":"left","toNode":"1e3b595e23c7d6e5","toSide":"right"},
		{"id":"c9c63e52f64bb579","fromNode":"eb89118d11d5274c","fromSide":"bottom","toNode":"1e3b595e23c7d6e5","toSide":"top"},
		{"id":"9385605877f63a82","fromNode":"e97c324844ab3ab2","fromSide":"left","toNode":"59a221b82dbb8e01","toSide":"right"},
		{"id":"f5c7f3c0753898d9","fromNode":"59a221b82dbb8e01","fromSide":"right","toNode":"adb557c81264d903","toSide":"left"},
		{"id":"39cfbe9b73861cd0","fromNode":"5c7081e77b877c26","fromSide":"top","toNode":"adb557c81264d903","toSide":"bottom"},
		{"id":"58f56ef397c36dfd","fromNode":"44e03a638c7d35ee","fromSide":"bottom","toNode":"06452951d8899820","toSide":"top"},
		{"id":"db8e42ff8910e4f3","fromNode":"d9e0d8cfd5b2988d","fromSide":"bottom","toNode":"c4cb17e5345459d2","toSide":"top"},
		{"id":"53d8febfe3021e59","fromNode":"f027933589f022bc","fromSide":"right","toNode":"3c42c293b0d4dc40","toSide":"left"},
		{"id":"8a368d0faf7c9d70","fromNode":"f027933589f022bc","fromSide":"right","toNode":"4f0ccd957583a326","toSide":"left"},
		{"id":"40614dfa3e7311c8","fromNode":"df37a2a3f6062c24","fromSide":"right","toNode":"c9bfb6dcac155385","toSide":"left"},
		{"id":"a33b97f3320a8753","fromNode":"df37a2a3f6062c24","fromSide":"right","toNode":"ac586d4c2703c531","toSide":"left"},
		{"id":"8f56b12db16fe787","fromNode":"df37a2a3f6062c24","fromSide":"right","toNode":"3fdab82b84fad7ac","toSide":"left"},
		{"id":"2870d4ff0c4084f7","fromNode":"df37a2a3f6062c24","fromSide":"right","toNode":"95c290e2c36ff453","toSide":"left"},
		{"id":"a1c97de6333e0c5e","fromNode":"df37a2a3f6062c24","fromSide":"bottom","toNode":"46b0fd1b50cd2c7d","toSide":"top"},
		{"id":"c60871010464ec56","fromNode":"df37a2a3f6062c24","fromSide":"bottom","toNode":"2cc8022386d8828a","toSide":"top"},
		{"id":"921dc29b53e09643","fromNode":"df37a2a3f6062c24","fromSide":"left","toNode":"c272616c6e9fde0e","toSide":"right"},
		{"id":"1c843c5603dd9183","fromNode":"df37a2a3f6062c24","fromSide":"left","toNode":"507111cdd66f8799","toSide":"right"},
		{"id":"1f042f008a705765","fromNode":"507111cdd66f8799","fromSide":"bottom","toNode":"3d71d557746de9f4","toSide":"top"},
		{"id":"04ed9d1b88c77f25","fromNode":"507111cdd66f8799","fromSide":"bottom","toNode":"404f18dd24537c94","toSide":"top"},
		{"id":"1025247da88ada69","fromNode":"507111cdd66f8799","fromSide":"bottom","toNode":"0268051225f86326","toSide":"top"},
		{"id":"7f15f69dd7f84d43","fromNode":"507111cdd66f8799","fromSide":"bottom","toNode":"e05b1de695f4d689","toSide":"top"},
		{"id":"21add804e170dc73","fromNode":"df37a2a3f6062c24","fromSide":"bottom","toNode":"793bfdcfcded4f89","toSide":"top"},
		{"id":"499f12690e76f3c0","fromNode":"fc12d4b55d29d076","fromSide":"right","toNode":"361f6b133ac2e8d9","toSide":"left"},
		{"id":"a2cd6f417c22cda8","fromNode":"fc12d4b55d29d076","fromSide":"right","toNode":"d99cd124fcf9ce7f","toSide":"left"},
		{"id":"2aca46b42b66ebbb","fromNode":"fc12d4b55d29d076","fromSide":"right","toNode":"9487e0c339e0149d","toSide":"left"},
		{"id":"86b1205d441ec5bc","fromNode":"fc12d4b55d29d076","fromSide":"top","toNode":"a5505702c14f9f35","toSide":"left"},
		{"id":"cc6a88dca05a90dc","fromNode":"fc12d4b55d29d076","fromSide":"bottom","toNode":"360a06d09ba0f24b","toSide":"top"},
		{"id":"6fc7bf005773b9df","fromNode":"fc12d4b55d29d076","fromSide":"bottom","toNode":"e08e6f5c1392b15b","toSide":"top"},
		{"id":"70414c29d3479351","fromNode":"360a06d09ba0f24b","fromSide":"bottom","toNode":"bcfd9563d2173a39","toSide":"top"},
		{"id":"8fea4290ccab3c5b","fromNode":"44e03a638c7d35ee","fromSide":"right","toNode":"ca3508d184191659","toSide":"left"},
		{"id":"015e69f961ba9b36","fromNode":"44e03a638c7d35ee","fromSide":"bottom","toNode":"b58bec406dbe1509","toSide":"top"},
		{"id":"7c6df8ebec59de5a","fromNode":"44e03a638c7d35ee","fromSide":"top","toNode":"1f297d634dc2f53c","toSide":"bottom"},
		{"id":"07e2ebc30d802b35","fromNode":"1f297d634dc2f53c","fromSide":"top","toNode":"596fb971950c1308","toSide":"bottom"},
		{"id":"7bbd5309b7ad053d","fromNode":"44e03a638c7d35ee","fromSide":"left","toNode":"8947693768a4a63f","toSide":"right"},
		{"id":"e52c59bcdfd8c7e4","fromNode":"1f297d634dc2f53c","fromSide":"left","toNode":"4a3f5c2ca8de3471","toSide":"right"},
		{"id":"02d908e9224e82c1","fromNode":"6f255bfd8668a339","fromSide":"left","toNode":"6dcd8f42c9cc35c5","toSide":"right"},
		{"id":"36e814fc88f2d587","fromNode":"6f255bfd8668a339","fromSide":"bottom","toNode":"806d738a7c126338","toSide":"top"},
		{"id":"e8680b7ca6943cec","fromNode":"6f255bfd8668a339","fromSide":"bottom","toNode":"287724591723812b","toSide":"top"},
		{"id":"4a022c8c039860fd","fromNode":"056cc6903dbf9460","fromSide":"right","toNode":"ceb076201912513e","toSide":"left"},
		{"id":"b7b0736d9b3e44a9","fromNode":"ceb076201912513e","fromSide":"bottom","toNode":"e833de7bfb92184c","toSide":"top"},
		{"id":"5cc8b40d1f779737","fromNode":"ceb076201912513e","fromSide":"bottom","toNode":"b56ad5c460caad65","toSide":"top"},
		{"id":"ff2cc7e86cea1162","fromNode":"e833de7bfb92184c","fromSide":"bottom","toNode":"36ac4716bcdedc64","toSide":"top"},
		{"id":"67283a5eeabd763b","fromNode":"b56ad5c460caad65","fromSide":"bottom","toNode":"68d0c580d7bd38cc","toSide":"top"},
		{"id":"c53f818b4213ff56","fromNode":"b2814a3c0c951f0e","fromSide":"bottom","toNode":"68d0c580d7bd38cc","toSide":"top"},
		{"id":"7dac808df400c33e","fromNode":"b2814a3c0c951f0e","fromSide":"right","toNode":"e64e2d2474b58113","toSide":"left"},
		{"id":"40ca04f603e11dbc","fromNode":"b2814a3c0c951f0e","fromSide":"right","toNode":"10e8ec35e12c341b","toSide":"left"},
		{"id":"3d597c7de77b2c58","fromNode":"e138291d8f447bb8","fromSide":"bottom","toNode":"595fbcbed55ef0d0","toSide":"top","color":"3"}
	]
}